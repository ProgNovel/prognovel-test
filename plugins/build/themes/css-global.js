const sass = require("node-sass");
const chalk = require("chalk");
const { resolve } = require("path");
const { readFileSync, writeFileSync } = require("fs");
const { minify } = require("html-minifier");

const raw = {
  cssVariables: readFileSync(resolve(__dirname, "../../../style/build-plugin/cssVariables.scss")).toString(),
  cssMiscs: readFileSync(resolve(__dirname, "../../../style/build-plugin/cssMiscs.scss")).toString(),
  cssLazy: readFileSync(resolve(__dirname, "css-plugin-lazy.scss")).toString(),
};

let htmlTemplate = readFileSync(resolve(__dirname, "../../../src/_@raw-template.html")).toString();

let targetTemplatePath = resolve(__dirname, "../../../src/template.html");
const cssPluginLogPrefix = chalk.bold.yellow("[CSS Plugin]:");

class CSSPlugin {
  apply(compiler) {
    compiler.hooks.afterPlugins.tap("CSSPlugin", () => {
      htmlTemplate = `<!-- THIS IS GENERATED FROM FILE _@raw-template.html 
- DO NOT EDIT THIS FILE DIRECTLY! -->
${htmlTemplate}`;

      const result = Object.keys(raw).reduce((prev, cur) => {
        const process = sass.renderSync({ data: raw[cur] }).css.toString("utf-8");
        prev[cur] = minify(process, {
          minifiyCSS: true,
          collapseWhitespace: true,
        }).toString();
        return prev;
      }, {});

      // const cssVariables = sass.renderSync({ data: raw.cssVariables }).css.toString("utf-8");
      // const cssVariablesResult = minify(cssVariables, {
      //   minifiyCSS: true,
      //   collapseWhitespace: true,
      // }).toString();
      // const cssMiscs = sass.renderSync({ data: raw.cssMiscs }).css.toString("utf-8");
      // const cssMiscsResult = minify(cssMiscs, { minifiyCSS: true, collapseWhitespace: true }).toString();

      writeFileSync(
        targetTemplatePath,
        htmlTemplate
          .replace("%css%", `<style>${result.cssVariables + result.cssMiscs}</style>`)
          .replace("%css.lazy%", `<style>${result.cssLazy}</style>`),
      );

      if (process.env.NODE_ENV !== "development") {
        console.log(cssPluginLogPrefix, "Done rewriting template.html with custom global CSS.");
      }
    });
  }
}

module.exports = CSSPlugin;
